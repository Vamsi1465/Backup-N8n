{
  "createdAt": "2025-10-15T18:47:57.246Z",
  "updatedAt": "2025-10-15T20:40:04.000Z",
  "id": "72DlIokudsCkSW8p",
  "name": "Reddit alerts",
  "active": true,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "simple": false,
        "filters": {
          "includeSpamTrash": false,
          "includeDrafts": false,
          "readStatus": "unread",
          "sender": "admin@f5bot.com"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.gmailTrigger",
      "typeVersion": 1.3,
      "position": [
        -864,
        -112
      ],
      "id": "525782cb-7fbc-4d45-9c6a-84fffc72a550",
      "name": "Gmail Trigger",
      "credentials": {
        "gmailOAuth2": {
          "id": "OEcIZm1duf4dQunn",
          "name": "Gmail account 2"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "ecdc66d7-f142-4953-b2b2-38bb592936da",
              "name": "html",
              "value": "={{ $json.html }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -656,
        -112
      ],
      "id": "db64bbe6-2581-4adf-aafd-5d14f1e8c104",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "jsCode": "const html = $json.html || \"\";\n\n// Remove everything after \"Do you have comments or suggestions\"\nconst cleanHtml = html.split(\"Do you have comments or suggestions\")[0];\n\n// Regex to extract each <h2>Keyword</h2> block\nconst keywordBlocks = cleanHtml.match(/<h2>.*?<\\/h2>([\\s\\S]*?)(?=<h2>|$)/g) || [];\n\nconst results = [];\n\nkeywordBlocks.forEach(block => {\n    // Extract keyword\n    const keywordMatch = block.match(/\"(.+?)\"/);\n    if (!keywordMatch) return;\n    const keyword = keywordMatch[1];\n\n    const posts = [];\n    const comments = [];\n\n    // Extract all <p> blocks inside this keyword block\n    const pMatches = block.match(/<p[\\s\\S]*?<\\/p>/g) || [];\n\n    pMatches.forEach(p => {\n        // Extract all <a> links in the <p>\n        const aMatches = [...p.matchAll(/<a [^>]*href=['\"]([^'\"]+)['\"][^>]*>(.*?)<\\/a>/g)];\n        aMatches.forEach(aMatch => {\n            const url = decodeURIComponent(aMatch[1].split(\"u=\")[1]?.split(\"&\")[0] || aMatch[1]);\n            const title = aMatch[2].trim();\n\n            // Determine if post or comment\n            if (p.includes(\"Reddit Posts\")) {\n                const subredditMatch = p.match(/\\/r\\/([^/]+)\\//);\n                posts.push({\n                    subreddit: subredditMatch ? subredditMatch[1] : \"\",\n                    title,\n                    type: \"post\",\n                    url,\n                    description: p.replace(/<[^>]+>/g, \"\").trim() // remove HTML tags for description\n                });\n            } else if (p.includes(\"Reddit Comments\")) {\n                const subredditMatch = p.match(/\\/r\\/([^/]+)\\//);\n                comments.push({\n                    subreddit: subredditMatch ? subredditMatch[1] : \"\",\n                    title,\n                    type: \"comment\",\n                    url,\n                    description: p.replace(/<[^>]+>/g, \"\").trim() // remove HTML tags for description\n                });\n            }\n        });\n    });\n\n    results.push({ keyword, posts, comments });\n});\n\n// Return structured JSON\nreturn results.map(r => ({ json: r }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -464,
        -112
      ],
      "id": "6cf3a28d-bee5-4cab-8381-4cbfbe2e0bf6",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "jsCode": "// Get all input items from previous node\nconst inputItems = Array.isArray($input.all()) ? $input.all() : [$json];\n\nconst output = [];\n\ninputItems.forEach(item => {\n    const data = item.json || item;\n\n    if (!data) return;\n\n    // Flatten post\n    if (data.posts && Array.isArray(data.posts)) {\n        data.posts.forEach(post => {\n            output.push({\n                type: post.type || \"post\",\n                title: post.title || \"\",\n                subreddit: post.subreddit || \"\",\n                url: post.url || \"\",\n                description: post.description || \"\"\n            });\n        });\n    }\n\n    // Flatten comments\n    if (data.comments && Array.isArray(data.comments)) {\n        data.comments.forEach(comment => {\n            output.push({\n                type: comment.type || \"comment\",\n                title: comment.title || \"\",\n                subreddit: comment.subreddit || \"\",\n                url: comment.url || \"\",\n                description: comment.description || \"\"\n            });\n        });\n    }\n});\n\n// Return flattened items\nreturn output.map(o => ({ json: o }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -288,
        -112
      ],
      "id": "f6dfa1b2-5d73-4d1a-b6f6-10c7c0c3f897",
      "name": "Code in JavaScript1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -80,
        -112
      ],
      "id": "7e4022b0-3c0d-45f7-9c6a-be7d1b978917",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "570d4188-cf29-4905-a468-ba2a825a8a54",
              "name": "Message",
              "value": "={{ $('Loop Over Items').item.json.description }}",
              "type": "string"
            },
            {
              "id": "64a2adf9-691d-4831-9600-45cdf92585c0",
              "name": "output.Keyword",
              "value": "={{ $json.message.content.keyword }}",
              "type": "string"
            },
            {
              "id": "3f0ceadb-2f98-4730-ac19-4363af07aeff",
              "name": "output.Type",
              "value": "={{ $json.message.content.type }}",
              "type": "string"
            },
            {
              "id": "2f7811ec-8ab1-4f8a-a401-f3edc0f97719",
              "name": "output.Intent_score",
              "value": "={{ $json.message.content.intent_score }}",
              "type": "string"
            },
            {
              "id": "9be261e0-48b9-45f8-9c5b-0012ac746096",
              "name": "Outmessage",
              "value": "={{ $json.message.content.intent_message }}",
              "type": "string"
            },
            {
              "id": "7361c49c-24a2-43fc-903f-da41787237f0",
              "name": "url",
              "value": "={{ $('Loop Over Items').item.json.url }}",
              "type": "string"
            },
            {
              "id": "49d0052e-e634-4bf1-bf1c-92e733e33dc9",
              "name": "title",
              "value": "={{ $('Loop Over Items').item.json.title }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        464,
        -96
      ],
      "id": "2b362f04-d994-4782-8a67-29a38edb4b1a",
      "name": "Edit Fields2"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1AoRFPfTSL7jUx8u0Wxf18kmRA-LTOVYyWl3fqVLOFwA",
          "mode": "list",
          "cachedResultName": "Reddit alerts",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1AoRFPfTSL7jUx8u0Wxf18kmRA-LTOVYyWl3fqVLOFwA/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1AoRFPfTSL7jUx8u0Wxf18kmRA-LTOVYyWl3fqVLOFwA/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Keyword": "={{ $json.output.Keyword }}",
            "Type": "={{ $json.output.Type }}",
            "Message": "={{ $json.Message }}",
            "URL": "={{ $json.url }}",
            "Title": "={{ $json.title }}",
            "Intent score": "={{ $json.output.Intent_score }}",
            "Outmessage": "={{ $json.Outmessage }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Keyword",
              "displayName": "Keyword",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Type",
              "displayName": "Type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "URL",
              "displayName": "URL",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Message",
              "displayName": "Message",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Title",
              "displayName": "Title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Intent score",
              "displayName": "Intent score",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Outmessage",
              "displayName": "Outmessage",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        784,
        -320
      ],
      "id": "444768d3-d253-4edc-8b99-b4c14a79cb17",
      "name": "Append row in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "3MsYFPOz6gYs3lBk",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "8417171830",
        "text": "=New Alert Bro\n\nTitle: {{ $json.title }}\n\nScore: {{ $json.output.Intent_score }}\n\nIntent message: {{ $json.Outmessage }}\n\nMain message: \n{{ $json.Message }}\n\nUrl: {{ $json.url }}\n__________________________",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        912,
        -16
      ],
      "id": "603cb45d-97bf-4522-a621-90f95228a7b9",
      "name": "Send a text message",
      "webhookId": "2425c591-bfe1-4af1-8bed-718433901129",
      "credentials": {
        "telegramApi": {
          "id": "Cj65UY9YytG3n0Ti",
          "name": "Reddit"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "6a1f8078-565d-47ff-bba7-1f370c04c443",
              "leftValue": "={{ $json.output.Intent_score.toNumber() }}",
              "rightValue": 60,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        688,
        0
      ],
      "id": "b2c4a9a8-1965-4cad-81e0-382b9344896f",
      "name": "If",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4.1-mini-2025-04-14",
          "mode": "list",
          "cachedResultName": "GPT-4.1-MINI-2025-04-14"
        },
        "messages": {
          "values": [
            {
              "content": "={{ $json.description }}"
            },
            {
              "content": "=You are an AI agent for a B2B AI Automation Agency that builds AI-powered workflow automation for coaches, consultants, real estate agents, lawyers, and similar B2B businesses.\n\nYour task: Analyze Reddit posts and comments (JSON input) to detect potential high-intent clients.\n\nInput format:\n\n[\n  {\n    \"keyword\": \"<topic or keyword>\",\n    \"posts\": [\n      {\n        \"title\": \"<post title>\",\n        \"subreddit\": \"<subreddit>\",\n        \"type\": \"post\",\n        \"url\": \"<url>\",\n        \"description\": \"<full post content>\"\n      }\n    ],\n    \"comments\": [\n      {\n        \"title\": \"<comment title>\",\n        \"subreddit\": \"<subreddit>\",\n        \"type\": \"comment\",\n        \"url\": \"<url>\",\n        \"description\": \"<full comment content>\"\n      }\n    ]\n  }\n]\n\nInstructions:\n\n1. Analyze semantically, do not rely on fixed keywords or subreddits.\n2. Identify high-intent signals:\n   - Pain points, inefficiencies, or repetitive business tasks.\n   - Interest in AI/automation tools.\n   - Requests for workflow solutions or tools.\n   - Anything showing potential need for AI automation.\n3. Assign **intent_score (0–100)**:\n   - 0–30: Low / casual discussion\n   - 31–60: Medium / some interest\n   - 61–100: High / actionable potential client\n4. Write a short **intent_message** explaining why this is high-intent.\n\nOutput **only** these two fields, for items with intent_score ≥ 50, in JSON array:\n\n[\n  {\n    \"intent_score\": <0–100>,\n    \"intent_message\": \"<short summary of pain point, inefficiency, or request>\"\n  }\n]\n",
              "role": "system"
            }
          ]
        },
        "jsonOutput": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        144,
        -96
      ],
      "id": "91058281-8870-4e97-b29e-64039227d8f1",
      "name": "Message a model",
      "credentials": {
        "openAiApi": {
          "id": "8cTwctTGeEBOJeUq",
          "name": "OpenAi account"
        }
      }
    }
  ],
  "connections": {
    "Gmail Trigger": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "Code in JavaScript1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript1": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Message a model",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "Append row in sheet",
            "type": "main",
            "index": 0
          },
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Send a text message",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send a text message": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message a model": {
      "main": [
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {
    "node:Gmail Trigger": {
      "Gmail Trigger": {
        "lastTimeChecked": 1760617272,
        "possibleDuplicates": [
          "199ecf796ec2cdfc",
          "199ecdc18bd6af5f"
        ]
      }
    }
  },
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "fd408b9d-563f-4ffc-af25-36aaf4a8e2ea",
  "triggerCount": 1,
  "shared": [
    {
      "createdAt": "2025-10-15T18:47:57.250Z",
      "updatedAt": "2025-10-15T18:47:57.250Z",
      "role": "workflow:owner",
      "workflowId": "72DlIokudsCkSW8p",
      "projectId": "VDyoKZWt3i5eAZSO"
    }
  ],
  "tags": []
}