{
  "createdAt": "2025-09-15T15:36:05.214Z",
  "updatedAt": "2025-09-16T21:01:57.000Z",
  "id": "8nzUzYTrFKvJYE1z",
  "name": "Reddit",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "jsCode": "const allPosts = [];\n\nitems.forEach(item => {\n  const children = item.json.data?.children || [];\n  \n  children.forEach(child => {\n    const d = child.data;\n    allPosts.push({\n      json: {\n        post_id: d.id,\n        post_link: d.permalink ? \"https://reddit.com\" + d.permalink : null,\n        author: d.author,\n        content: ((d.title || \"\") + (d.selftext ? \" - \" + d.selftext : \"\")).slice(0,1000),\n        timestamp: d.created_utc ? new Date(d.created_utc*1000).toISOString() : null,\n        community: d.subreddit,\n        keyword: item.json.keywords,\n        ups: d.ups,\n        score: d.score,\n        flair: d.link_flair_text || null\n      }\n    });\n  });\n});\n\nreturn allPosts;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2288,
        320
      ],
      "id": "22a846c9-da7c-4125-a4c9-432d860c32e0",
      "name": "Code"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "4e441380-cf20-45df-8e99-d23b1367fcf9",
              "name": "message.content.engagement_suggestion",
              "value": "={{ $json.message.content.engagement_suggestion }}",
              "type": "string"
            },
            {
              "id": "49fa2ac7-b3a9-4df7-9400-a473792a814d",
              "name": "message.content.post_summary",
              "value": "={{ $json.message.content.post_summary }}",
              "type": "string"
            },
            {
              "id": "861dec5f-7ac6-4730-8889-0875dab2ab07",
              "name": "post_link",
              "value": "={{ $('Loop Over Items').item.json.post_link }}",
              "type": "string"
            },
            {
              "id": "71219fc1-8be0-437a-b05b-e5f99765bae6",
              "name": "Relavance",
              "value": "={{ $('Filter1').item.json.message.content.classification }}",
              "type": "string"
            },
            {
              "id": "148972f8-fcf3-4ef9-9e69-816aa5544aa8",
              "name": "Relevance number",
              "value": "={{ $('Filter1').item.json.relevanceNumber }}",
              "type": "number"
            },
            {
              "id": "c6627f48-9eb0-4993-88af-91f8c414f38f",
              "name": "Intent",
              "value": "={{ $('Filter1').item.json.message.content.intent }}",
              "type": "string"
            },
            {
              "id": "0dbdf6eb-0475-4bd7-8cbb-7f246143a24b",
              "name": "Sentiment",
              "value": "={{ $('Filter1').item.json.message.content.sentiment }}",
              "type": "string"
            },
            {
              "id": "8bbdf9fa-06b5-486a-aa86-72f4e1200b84",
              "name": "author",
              "value": "={{ $('Loop Over Items').item.json.author }}",
              "type": "string"
            },
            {
              "id": "bd381e48-160e-4909-84e7-689d4ca87288",
              "name": "post_id",
              "value": "={{ $('Loop Over Items').item.json.post_id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        560,
        448
      ],
      "id": "68710e02-84be-4f56-8140-45d35c8a76cc",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1Q46sO_JIcm_LFKEEM3nxiOhAXT1b9swvQRGJrByx4X8",
          "mode": "list",
          "cachedResultName": "Untitled spreadsheet",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Q46sO_JIcm_LFKEEM3nxiOhAXT1b9swvQRGJrByx4X8/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Q46sO_JIcm_LFKEEM3nxiOhAXT1b9swvQRGJrByx4X8/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Post summary": "={{ $json.message.content.post_summary }}",
            "Engagement suggestion": "={{ $json.message.content.engagement_suggestion }}",
            "Relevance number": "={{ $json['Relevance number'] }}",
            "Intent": "={{ $json.Intent }}",
            "Sentiment": "={{ $json.Sentiment }}",
            "Relavance": "={{ $json.Relavance }}",
            "Processed": "Yes",
            "postid(slack)": "0",
            "post_id": "={{ $json.post_id }}",
            "post link": "={{ $json.post_link }}"
          },
          "matchingColumns": [
            "Relavance Score"
          ],
          "schema": [
            {
              "id": "post_id",
              "displayName": "post_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "post link",
              "displayName": "post link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Post summary",
              "displayName": "Post summary",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Relavance",
              "displayName": "Relavance",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Engagement suggestion",
              "displayName": "Engagement suggestion",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Relevance number",
              "displayName": "Relevance number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Intent",
              "displayName": "Intent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Sentiment",
              "displayName": "Sentiment",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Processed",
              "displayName": "Processed",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "postid(slack)",
              "displayName": "postid(slack)",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Update",
              "displayName": "Update",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "no of reactions",
              "displayName": "no of reactions",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        1376,
        448
      ],
      "id": "3eb536a9-02c9-4701-8eab-36573a183073",
      "name": "Append row in sheet"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1Q46sO_JIcm_LFKEEM3nxiOhAXT1b9swvQRGJrByx4X8",
          "mode": "list",
          "cachedResultName": "Untitled spreadsheet",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Q46sO_JIcm_LFKEEM3nxiOhAXT1b9swvQRGJrByx4X8/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 738652724,
          "mode": "list",
          "cachedResultName": "Sheet",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Q46sO_JIcm_LFKEEM3nxiOhAXT1b9swvQRGJrByx4X8/edit#gid=738652724"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -2960,
        320
      ],
      "id": "5dab01e2-efc2-466f-bb38-815439193e5b",
      "name": "Get row(s) in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "3MsYFPOz6gYs3lBk",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2f41e814-5797-4938-961c-7f5e3e993f47",
              "leftValue": "={{ $json.keywords }}",
              "rightValue": "=\" \"",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        -2720,
        320
      ],
      "id": "a218848d-f26c-4fd2-a78e-1293c33383bb",
      "name": "Filter"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 13
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -3296,
        480
      ],
      "id": "32ccf510-b512-4b3b-9e55-c36f1c8ee01e",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "jsCode": "// Convert confidence 0-1 to relevance number 1-5\nconst confidence = parseFloat($json.message.content.confidence) || 0;\nlet relevanceNumber = 1;\n\nif(confidence > 0.8) relevanceNumber = 5;\nelse if(confidence > 0.6) relevanceNumber = 4;\nelse if(confidence > 0.4) relevanceNumber = 3;\nelse if(confidence > 0.2) relevanceNumber = 2;\nelse relevanceNumber = 1;\n\n// Optional: priority score combining relevance, sentiment, and intent\nconst sentimentScore = $json.message.content.sentiment === 'positive' ? 1 \n                    : $json.message.content.sentiment === 'neutral' ? 0.5 \n                    : 0; // negative\n\nconst intentMap = {\n  'vendor search': 1,\n  'question': 1,\n  'complaint': 0.8,\n  'general chatter': 0.3,\n  'career update': 0.5,\n  'other': 0.5\n};\n\nconst intentScore = intentMap[$json.message.content.intent] || 0.5;\n\n// Weighted priority score 1-5\nconst priorityScore = Math.round(((relevanceNumber/5)*0.6 + sentimentScore*0.2 + intentScore*0.2) * 5);\n\nreturn [\n  {\n    json: {\n      ...$json,\n      relevanceNumber,\n      priorityScore\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -416,
        448
      ],
      "id": "389a19bb-eec7-41d8-99df-d546a448e17d",
      "name": "Code1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "237c3fdb-6989-4fdf-88a4-6131d9d53174",
              "leftValue": "={{ $json.relevanceNumber }}",
              "rightValue": 3,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            },
            {
              "id": "5dc4cc7f-1903-4051-9de2-fc85f44a5e76",
              "leftValue": "={{ $json.priorityScore }}",
              "rightValue": 3,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        -192,
        448
      ],
      "id": "61658e15-0391-4a47-b8c7-be1307f1f12a",
      "name": "Filter1"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1Q46sO_JIcm_LFKEEM3nxiOhAXT1b9swvQRGJrByx4X8",
          "mode": "list",
          "cachedResultName": "Untitled spreadsheet",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Q46sO_JIcm_LFKEEM3nxiOhAXT1b9swvQRGJrByx4X8/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Q46sO_JIcm_LFKEEM3nxiOhAXT1b9swvQRGJrByx4X8/edit#gid=0"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -2528,
        1408
      ],
      "id": "6bbdf1f3-deab-4463-956f-752ccb8957e1",
      "name": "Get row(s) in sheet2",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "3MsYFPOz6gYs3lBk",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Ensure items exist and map them to posts\nconst posts = items.map(i => {\n  return {\n    ...i.json,\n    Intent: i.json.Intent || \"other\",\n    Sentiment: i.json.Sentiment || \"neutral\",\n    timestamp: i.json.timestamp || new Date().toISOString()\n  };\n});\n\n// Function to get ISO week number\nfunction getWeekNumber(d) {\n  if (!d) return \"Unknown\";\n  d = new Date(d);\n  if (isNaN(d)) return \"Unknown\";\n\n  d.setHours(0, 0, 0, 0);\n  d.setDate(d.getDate() + 4 - (d.getDay() || 7));\n  const yearStart = new Date(d.getFullYear(), 0, 1);\n  const weekNo = Math.ceil((((d - yearStart) / 86400000) + 1) / 7);\n  return `${d.getFullYear()}-W${weekNo}`;\n}\n\n// Aggregate weekly data with all intents & sentiments initialized\nconst weekData = {};\n\nposts.forEach(p => {\n  const week = getWeekNumber(p.timestamp);\n  if (!weekData[week]) {\n    weekData[week] = {\n      total: 0,\n      intents: {\n        question: 0,\n        complaint: 0,\n        \"vendor search\": 0,\n        \"general chatter\": 0,\n        \"career update\": 0,\n        other: 0\n      },\n      sentiment: { positive: 0, neutral: 0, negative: 0 }\n    };\n  }\n\n  weekData[week].total += 1;\n\n  const intent = p.Intent.toLowerCase();\n  weekData[week].intents[intent] = (weekData[week].intents[intent] || 0) + 1;\n\n  const sentiment = p.Sentiment.toLowerCase();\n  weekData[week].sentiment[sentiment] = (weekData[week].sentiment[sentiment] || 0) + 1;\n});\n\nreturn Object.entries(weekData).map(([week, data]) => ({\n  json: { week, ...data }\n}));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2304,
        1408
      ],
      "id": "14668e89-f0ae-466d-8002-ab52827da623",
      "name": "Code2"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1Q46sO_JIcm_LFKEEM3nxiOhAXT1b9swvQRGJrByx4X8",
          "mode": "list",
          "cachedResultName": "Untitled spreadsheet",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Q46sO_JIcm_LFKEEM3nxiOhAXT1b9swvQRGJrByx4X8/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 862058655,
          "mode": "list",
          "cachedResultName": "Copy of Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Q46sO_JIcm_LFKEEM3nxiOhAXT1b9swvQRGJrByx4X8/edit#gid=862058655"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Week": "={{ $json.week }}",
            "Total": "={{ $json.total }}",
            "Question": "={{ $json.intents.question }}",
            "Complaint": "={{ $json.intents.complaint }}",
            "Positive": "={{ $json.sentiment.positive }}",
            "Neutral": "={{ $json.sentiment.neutral }}",
            "Negative": "={{ $json.sentiment.negative }}",
            "Vendor Search": "={{ $json.intents['vendor search'] }}",
            "General Chatter": "={{ $json.intents['general chatter'] }}",
            "Career Update": "={{ $json.intents['career update'] }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Week",
              "displayName": "Week",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Total",
              "displayName": "Total",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Question",
              "displayName": "Question",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "General Chatter",
              "displayName": "General Chatter",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Career Update",
              "displayName": "Career Update",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Complaint",
              "displayName": "Complaint",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Vendor Search",
              "displayName": "Vendor Search",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Positive",
              "displayName": "Positive",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Neutral",
              "displayName": "Neutral",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Negative",
              "displayName": "Negative",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -2080,
        1408
      ],
      "id": "513ffbcc-d5ad-4df7-9eaa-eb76ba081f18",
      "name": "Append row in sheet1",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "3MsYFPOz6gYs3lBk",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "weeks"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -2752,
        1408
      ],
      "id": "7f8f0d09-f670-4984-abf4-2ddf21af9c0b",
      "name": "Schedule Trigger1"
    },
    {
      "parameters": {
        "jsCode": "// Input: item.json.post_link (could be '\"<link>\"')\n// Output: cleaned link without quotes\n\nreturn items.map(item => {\n  if (item.json.post_link) {\n    // Remove surrounding quotes\n   item.json.post_link = item.json.post_link.replace(/^\\\"|\\\"$/g, '');\n  }\n  return item;\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1056,
        448
      ],
      "id": "0bf11cf3-83b9-4aa6-8a92-d07071157e13",
      "name": "Code3"
    },
    {
      "parameters": {
        "url": "=https://oauth.reddit.com/search?q={{ $json[\"keywords\"] }}&type=link&limit=1",
        "authentication": "genericCredentialType",
        "genericAuthType": "oAuth2Api",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2496,
        320
      ],
      "id": "7bca1b2c-715e-4837-8ebd-6198f692892c",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "content": "Workflow Logic:\n\n- Loop Over Items:\n    • Process each post individually\n\n- Message a Model:\n    • Send post content to GPT-4.1-mini\n    • Get classification (Relevant/Not Relevant), intent, sentiment, and confidence\n\n- Code1:\n    • Convert confidence to relevanceNumber (1-5)\n    • Calculate priorityScore combining relevance, sentiment, and intent\n\n- Filter1:\n    • Pass posts with relevanceNumber > 3 OR priorityScore > 3\n    • Ignore others\n",
        "height": 768,
        "width": 1392
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1440,
        16
      ],
      "typeVersion": 1,
      "id": "bf4d8cde-0f14-4962-84a3-f4eb17c79b3f",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "Workflow Logic: Engagement & Sheet Update\n\n- Message a model1:\n    • Send post content, intent, and sentiment to GPT-4.1-mini\n    • Get concise post summary and engagement suggestion\n    • Output in JSON for automation\n\n- Edit Fields1:\n    • Map GPT output to internal fields\n    • Add post metadata: link, author, relevance, intent, sentiment, processed status\n\n- Code3:\n    • Clean post link (remove surrounding quotes)\n\n- Append row in sheet:\n    • Append processed post with all mapped fields into Google Sheet\n    • Mark post as \"Processed\" to avoid duplicates\n\n- Send a message1:\n    • Send post details and engagement suggestion to Slack channel\n    • Include link, author, summary, relevance, confidence, intent\n",
        "height": 992,
        "width": 1728,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        0,
        0
      ],
      "typeVersion": 1,
      "id": "dceaaff1-de70-40bc-9c77-a3fc6df5101c",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C09FGV1KRFB",
          "mode": "list",
          "cachedResultName": "all-vamsi"
        },
        "text": "=New Relevant Post Detected\n\nPost Link: {{ $('Edit Fields1').item.json.post_link }}\nAuthor: {{ $('Edit Fields1').item.json.author }}\nPost Summary: {{ $('Edit Fields1').item.json.message.content.post_summary }}\nRelevance Score:  {{ $('Edit Fields1').item.json.Relavance }}\nConfidence: {{ $('Edit Fields1').item.json['Relevance number'] }}\nEngagement Suggestion:   {{ $('Edit Fields1').item.json.message.content.engagement_suggestion }}\nIntent: {{ $('Edit Fields1').item.json.Intent }}",
        "otherOptions": {
          "mrkdwn": true
        }
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        1056,
        784
      ],
      "id": "ea63ef29-c7e0-4a82-8672-1a1bbaeb3bc9",
      "name": "Send a message1",
      "webhookId": "47a65711-9698-4acf-bb54-e1565c7aa600"
    },
    {
      "parameters": {
        "trigger": [
          "reaction_added"
        ],
        "channelId": {
          "__rl": true,
          "value": "C09FGV1KRFB",
          "mode": "list",
          "cachedResultName": "all-vamsi"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.slackTrigger",
      "typeVersion": 1,
      "position": [
        -1360,
        1392
      ],
      "id": "34910cec-9310-43f6-8a76-6677314241fe",
      "name": "Slack Trigger",
      "webhookId": "d3200406-396d-4725-9170-7ba99ceb837a"
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\n  // Check if there is at least one reaction\n  const hasReaction = item.json.reaction || item.json.totalReactionsList;\n\n  // Determine update value\n  const updateStatus = hasReaction ? 'reacted' : 'not reacted';\n\n  // Extract Slack user ID (unique per workspace)\n  const userId = item.json.user;  \n\n  // Extract Slack message timestamp (unique per channel)\n  const postId = item.json.item?.ts || item.json.postId;\n\n  return {\n    json: {\n      postId,                         // Slack message ts (unique per message)\n      userId,                         // Slack user ID (unique per user)\n      update: updateStatus,           // 'reacted' or 'not reacted'\n      timestamp: new Date().toISOString()\n    }\n  };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1168,
        1392
      ],
      "id": "19828efb-02c1-4008-a4a7-59f29cbdba27",
      "name": "Code4"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -1184,
        432
      ],
      "id": "8ad4dec8-1dd0-4af8-bb1d-d72cd92e8273",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "content": "Weekly Post Analytics Workflow:\n\n- Schedule Trigger → runs weekly\n- Get rows from Sheet → fetch posts\n- Code2 → \n    • Assign defaults for Intent/Sentiment\n    • Calculate ISO week\n    • Aggregate counts: total posts, intents, sentiments\n- Append row → save weekly summary to Sheet\n",
        "height": 448,
        "width": 960
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2800,
        1120
      ],
      "typeVersion": 1,
      "id": "944e7dae-ec65-46fa-85c9-b6042938c6b6",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "Slack Reaction Tracker Workflow:\n\n- Slack Trigger → fires when a reaction is added\n- Code4 → marks post as 'reacted' or 'not reacted'\n- Get row(s) in Sheet → fetch post data\n- Code5 → increment reactions count & set engagement score\n- Append or Update Row → update Google Sheet\n- Update Row → ensure final sheet is synced\n",
        "height": 448,
        "width": 1344,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1440,
        1136
      ],
      "typeVersion": 1,
      "id": "218f9096-822b-4375-809c-81a0b4c35265",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "GPT-4.1-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=Classify the following post for growth marketing GTM relevance:\n\nPost Content:\n{{ $('Loop Over Items').item.json.content }}\nInstructions:\n1. Classify the post as \"Relevant\" or \"Not Relevant\".\n2. Identify the intent: choose one of [\"question\", \"complaint\", \"vendor search\", \"general chatter\", \"career update\", \"other\"].\n3. Analyze the sentiment: choose one of [\"positive\", \"neutral\", \"negative\"].\n4. Provide a confidence score between 0 and 1.\n5. Return **only JSON** with no extra text.\n\nExpected JSON format:\n{\n  \"classification\": \"<Relevant or Not Relevant>\",\n  \"intent\": \"<intent category>\",\n  \"sentiment\": \"<positive/neutral/negative>\",\n  \"confidence\": <confidence score between 0 and 1>\n}\n"
            },
            {
              "content": "You are an expert growth marketer and data analyst. Your job is to classify social media posts for GTM monitoring.\n",
              "role": "system"
            }
          ]
        },
        "jsonOutput": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -752,
        448
      ],
      "id": "00795679-87fd-487d-9919-5c32650262cb",
      "name": "Scoring",
      "credentials": {
        "openAiApi": {
          "id": "8cTwctTGeEBOJeUq",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "GPT-4.1-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=You are a professional growth marketer and engagement strategist.\n\nUsing the following post, create:\n\n1. A concise summary (1–2 sentences) capturing the main idea.\n2. A short engagement suggestion (1–2 sentences) tailored to the post's content, intent, and sentiment. \n   - The suggestion can be a comment or a DM depending on what is most appropriate. \n   - Avoid generic responses like “Appreciate you sharing this.” \n   - Make it actionable, helpful, or conversational based on the post.\n\nPost Content:\n{{ $('Loop Over Items').item.json.content }}\n\nPost Intent: {{ $json.message.content.intent }}\nPost Sentiment: {{ $json.message.content.sentiment }}\n\nInstructions:\n\n- Question → provide a helpful answer or tip.\n- Complaint → show empathy and suggest solutions.\n- Vendor search → recommend relevant options or support.\n- General chatter → lightly acknowledge or engage.\n- Tone: Always professional, friendly, and concise.\n\nFormat: Write the engagement suggestion as a comment, DM, or reply based on context. \n\nOutput Style: Use clear JSON for n8n automation.\n\nJSON Output Example:\n{\n  \"post_summary\": \"<concise summary capturing main idea>\",\n  \"engagement_suggestion\": \"<contextual comment or DM based on content>\"\n}\n"
            },
            {
              "content": "You are a professional growth marketer and engagement strategist. Follow the instructions in the user prompt to generate concise summaries and engagement suggestions"
            }
          ]
        },
        "jsonOutput": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        144,
        448
      ],
      "id": "8b7641c5-60ab-4ec0-b1c8-fcd0b9b24e7e",
      "name": "Engagement"
    },
    {
      "parameters": {
        "resource": "reaction",
        "operation": "get",
        "channelId": {
          "__rl": true,
          "value": "C09FGV1KRFB",
          "mode": "list",
          "cachedResultName": "all-vamsi"
        },
        "timestamp": "={{ $('Slack Trigger').item.json.item.ts }}"
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        -944,
        1392
      ],
      "id": "42db20d1-2cbe-4289-a6f7-1b08caa0757e",
      "name": "Get a reaction",
      "webhookId": "d0bcecd7-03f5-41f3-963a-2ef2f1f49739"
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\n  const reactions = item.json.message?.reactions || [];\n  const totalReactions = reactions.reduce((sum, r) => sum + (r.count || 0), 0);\n\n  let postId = item.json.message?.ts;\n  if (postId) postId = postId.toString().split(\".\")[0]; // only before dot\n\n  const userId = item.json.message?.user || null;\n\n  const updateStatus = totalReactions > 0 ? 'reacted' : 'not reacted';\n\n  return {\n    json: {\n      postId,\n      userId,\n      update: updateStatus,\n      no_of_reactions: totalReactions,\n      timestamp: new Date().toISOString()\n    }\n  };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -704,
        1392
      ],
      "id": "4b8438c2-1f6d-4ac4-8f6b-d5b9cf9c801b",
      "name": "Code5"
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\n  // Slack message ID (unique per message in a channel)\n  const tsFull = item.json.item?.ts || item.json.message_timestamp || item.json.ts;\n\n  // Keep only the part before the dot\n  const ts = tsFull ? tsFull.toString().split('.')[0] : \"\";\n\n  return {\n    json: {\n      Post_link: item.json.Post_link,   // Reddit post link from earlier node\n      postid_slack: ts,                 // Slack message ID (before .)\n      Update: \"not reacted\",\n      no_of_reactions: 0\n    }\n  };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1280,
        784
      ],
      "id": "9dafb840-6a65-492c-9c1d-a73a9fd55ffe",
      "name": "Code6"
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1Q46sO_JIcm_LFKEEM3nxiOhAXT1b9swvQRGJrByx4X8",
          "mode": "list",
          "cachedResultName": "Reddit",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Q46sO_JIcm_LFKEEM3nxiOhAXT1b9swvQRGJrByx4X8/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Main sheet",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Q46sO_JIcm_LFKEEM3nxiOhAXT1b9swvQRGJrByx4X8/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Update": "={{ $json.update }}",
            "postid(slack)": "={{ $json.postId }}",
            "no of reactions": "={{ $json.no_of_reactions }}"
          },
          "matchingColumns": [
            "postid(slack)"
          ],
          "schema": [
            {
              "id": "post_id",
              "displayName": "post_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "post link",
              "displayName": "post link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Post summary",
              "displayName": "Post summary",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Relavance",
              "displayName": "Relavance",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Engagement suggestion",
              "displayName": "Engagement suggestion",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Relevance number",
              "displayName": "Relevance number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Intent",
              "displayName": "Intent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Sentiment",
              "displayName": "Sentiment",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Processed",
              "displayName": "Processed",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "postid(slack)",
              "displayName": "postid(slack)",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Update",
              "displayName": "Update",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "no of reactions",
              "displayName": "no of reactions",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -464,
        1392
      ],
      "id": "a89dd61f-c0d8-454b-9680-777a77f7a19e",
      "name": "Update row in sheet2"
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1Q46sO_JIcm_LFKEEM3nxiOhAXT1b9swvQRGJrByx4X8",
          "mode": "list",
          "cachedResultName": "Reddit",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Q46sO_JIcm_LFKEEM3nxiOhAXT1b9swvQRGJrByx4X8/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Main sheet",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Q46sO_JIcm_LFKEEM3nxiOhAXT1b9swvQRGJrByx4X8/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "postid(slack)": "={{ $json.postid_slack }}",
            "Update": "not reacted",
            "no of reactions": "={{ $json.no_of_reactions }}",
            "row_number": 0,
            "post_id": "={{ $('Edit Fields1').item.json.post_id }}",
            "post link": "={{ $('Edit Fields1').item.json.post_link }}"
          },
          "matchingColumns": [
            "post_id"
          ],
          "schema": [
            {
              "id": "post_id",
              "displayName": "post_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "post link",
              "displayName": "post link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Post summary",
              "displayName": "Post summary",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Relavance",
              "displayName": "Relavance",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Engagement suggestion",
              "displayName": "Engagement suggestion",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Relevance number",
              "displayName": "Relevance number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Intent",
              "displayName": "Intent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Sentiment",
              "displayName": "Sentiment",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Processed",
              "displayName": "Processed",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "postid(slack)",
              "displayName": "postid(slack)",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Update",
              "displayName": "Update",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "no of reactions",
              "displayName": "no of reactions",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        1552,
        784
      ],
      "id": "8eede429-0bc9-4a92-accf-fb6ab05406de",
      "name": "Update row in sheet1"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1Q46sO_JIcm_LFKEEM3nxiOhAXT1b9swvQRGJrByx4X8",
          "mode": "list",
          "cachedResultName": "Reddit",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Q46sO_JIcm_LFKEEM3nxiOhAXT1b9swvQRGJrByx4X8/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Main sheet",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Q46sO_JIcm_LFKEEM3nxiOhAXT1b9swvQRGJrByx4X8/edit#gid=0"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -2592,
        560
      ],
      "id": "a8f20f8f-024b-4ea3-82f3-80c199932917",
      "name": "Get row(s) in sheet1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -1856,
        448
      ],
      "id": "740cd47f-aed0-490b-af2c-ef64696a850c",
      "name": "Merge"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "436a8ac8-9c22-4881-8e04-fd15b9077248",
              "name": "Field2",
              "value": "sheet",
              "type": "string"
            },
            {
              "id": "119fe8e5-703b-4440-9af2-29c582727975",
              "name": "post_id",
              "value": "={{ $json.post_id }}",
              "type": "string"
            },
            {
              "id": "c10eb793-5ed9-4fdb-9263-b4204e14ae2b",
              "name": "Post link",
              "value": "={{ $json['post link'] }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2160,
        528
      ],
      "id": "c705378f-6331-48af-af45-ccd227137be9",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "ce670397-9c56-48f9-8baa-c70cc727685b",
              "name": "Field1",
              "value": "http",
              "type": "string"
            },
            {
              "id": "0e0688ba-6ee2-4075-83cd-b81dafe3def5",
              "name": "post_id",
              "value": "={{ $json.post_id }}",
              "type": "string"
            },
            {
              "id": "cc2856e1-caa5-4e0a-959f-6ccd1ebe7278",
              "name": "post_link",
              "value": "={{ $json.post_link }}",
              "type": "string"
            },
            {
              "id": "059959c4-73cf-4f11-82b0-0fd3f4233b38",
              "name": "author",
              "value": "={{ $json.author }}",
              "type": "string"
            },
            {
              "id": "61a60574-d294-4f48-97d5-5e699958ab6d",
              "name": "content",
              "value": "={{ $json.content }}",
              "type": "string"
            },
            {
              "id": "f0016ddb-b897-4fc6-8b09-8397cb0f5f4f",
              "name": "timestamp",
              "value": "={{ $json.timestamp }}",
              "type": "string"
            },
            {
              "id": "64e3cfa4-4ae0-4c7c-8802-faa337c2d6b5",
              "name": "community",
              "value": "={{ $json.community }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2096,
        320
      ],
      "id": "828404c3-9661-450a-beea-3fbab9c1a359",
      "name": "Edit Fields2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "7117acae-ccec-48dc-a80b-9c3139f65c6a",
              "leftValue": "={{ $json.Field1 }}",
              "rightValue": "=http",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1648,
        448
      ],
      "id": "2cd9d6b9-30c6-4b47-b4a7-85a09f667b7c",
      "name": "If"
    },
    {
      "parameters": {
        "content": "Schedule Trigger         → Start workflow at a scheduled time\nGet Row(s) in Sheet      → Fetch keywords from Google Sheet\nFilter                   → Remove empty keywords\nHTTP Request             → Search Reddit using the keywords\nCode                     → Extract required post fields: post_id, post_link, author, content, timestamp, community, ups, score, flair\nEdit Fields2             → Format post data for processing/storage\nGet Row(s) in Sheet1     → Fetch existing sheet rows for comparison\nEdit Fields              → Prepare sheet-ready data with key fields\nMerge                    → Combine new posts with existing rows\nIf                       → Check source (Field1 = http) to split workflow for further actions\n",
        "height": 784,
        "width": 1984,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -3440,
        16
      ],
      "typeVersion": 1,
      "id": "774f241b-9814-4774-9dc9-7cc6f07e1bbc",
      "name": "Sticky Note1"
    }
  ],
  "connections": {
    "Code": {
      "main": [
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send a message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append row in sheet": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get row(s) in sheet": {
      "main": [
        [
          {
            "node": "Filter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Get row(s) in sheet",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get row(s) in sheet1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Filter1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter1": {
      "main": [
        [
          {
            "node": "Engagement",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get row(s) in sheet2": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Append row in sheet1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger1": {
      "main": [
        [
          {
            "node": "Get row(s) in sheet2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "Append row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Slack Trigger": {
      "main": [
        [
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code4": {
      "main": [
        [
          {
            "node": "Get a reaction",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Scoring",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Scoring": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Engagement": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get a reaction": {
      "main": [
        [
          {
            "node": "Code5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code5": {
      "main": [
        [
          {
            "node": "Update row in sheet2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send a message1": {
      "main": [
        [
          {
            "node": "Code6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code6": {
      "main": [
        [
          {
            "node": "Update row in sheet1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get row(s) in sheet1": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {},
  "versionId": "9571f716-5f80-4efb-93ac-afe452d4f9b3",
  "triggerCount": 0,
  "shared": [
    {
      "createdAt": "2025-09-15T15:36:05.217Z",
      "updatedAt": "2025-09-15T15:36:05.217Z",
      "role": "workflow:owner",
      "workflowId": "8nzUzYTrFKvJYE1z",
      "projectId": "VDyoKZWt3i5eAZSO"
    }
  ],
  "tags": []
}